#!/bin/sh

# build_manifest
# David Adams
# August 2015
#
# Builds the SciSoft manifest for dune.

BUNDLE=$1
QUAL=$2
SRCDIR=$3
NEWVERS=$4
VERS=$LARSOFT_VERSION
DOTVERS=`echo $VERS |  sed -e 's/_/./g' | sed -e 's/^v//'`
INTVERS=`echo $VERS |  sed -e 's/_//g' | sed -e 's/^v//' | sed -e 's/^0*//g'`
NEWDOTVERS=`echo $NEWVERS |  sed -e 's/_/./g' | sed -e 's/^v//'`
NEWINTVERS=`echo $NEWVERS |  sed -e 's/_//g' | sed -e 's/^v//' | sed -e 's/^0*//g'`
FLAVOR=
DBG=
ISDARWIN=
if uname | grep -q Darwin; then
  FLAVOR=`ups flavor -2`
  ISDARWIN=true
else
  FLAVOR=`ups flavor`
fi
HYPHENQUALNOIFDH=`echo $QUAL | tr : - | sed 's/-noifdh//'`
HYPHENQUAL=`echo $QUAL | tr : -`
SVAL=s21
if [ $INTVERS -ge 43000 ]; then SVAL=s24; fi
if [ $INTVERS -ge 43100 ]; then SVAL=s26; fi
if [ $INTVERS -ge 43201 ]; then SVAL=s28; fi
OPSYS=` get-directory-name os`
PLATFORM=` get-directory-name platform`

# Check the variables are defined.
for VAR in BUNDLE VERS DOTVERS NEWVERS NEWDOTVERS FLAVOR QUAL HYPHENQUAL OPSYS PLATFORM; do
  eval VAL=\$$VAR
  if [ -z "$VAL" ]; then
    echo Variable $VAR must be defined.
    exit 1
  fi
  if [ -n "$DBG" ]; then echo $VAR = $VAL; fi
done

# Check if dunetpc is installed. This needed to get dependencies from ups.
CHECK=`ups list -aK+ dunetpc $NEWVERS -q $QUAL`
if [ -z "$CHECK" ]; then
  LINE="-----------------------------------------------------------"
  echo Unable to find dunetpc $NEWVERS $QUAL
  echo These versions:
  echo $LINE
  ups list -aK+ dunetpc
  echo $LINE
  echo are found in these directories:
  echo $LINE
  ups list xxx | grep DATABASE | sed 's/DATABASE=//g'
  echo $LINE
  echo Please install dunetpc $NEWVERS $QUAL
  exit 1
fi

LARFILE=larsoft-$DOTVERS-$FLAVOR-$SVAL-${HYPHENQUALNOIFDH}_MANIFEST.txt
LARURL=http://scisoft.fnal.gov/scisoft/bundles/larsoft/$VERS/manifest/$LARFILE
curl --fail --silent $LARURL > $LARFILE
STAT=$?
if [ $STAT -ne 0 ]; then
  echo Unable to retrieve larsoft manifest from
  echo $LARURL
  rm $LARFILE
  exit 2
fi
if [ -n "$DBG"]; then echo Retrieved larsoft manifest.; fi

NEWFILE=$BUNDLE-$NEWDOTVERS-$FLAVOR-${HYPHENQUALNOIFDH}_MANIFEST.txt
cp $LARFILE $NEWFILE
TARSUFF=$OPSYS-$PLATFORM-$HYPHENQUAL.tar.bz2
if [ $BUNDLE == dune ]; then
  TARNAME=dunetpc-$NEWDOTVERS-$TARSUFF
  PKGURL=http://scisoft.fnal.gov/scisoft/packages/dunetpc/$NEWVERS/$TARNAME
  if ! curl -Is $PKGURL| head -1 | grep 200 >/dev/null; then
    echo Unable to find tar file for dunetpc $NEWVERS at URL
    echo "   $PKGURL"
    exit 4
  fi
  FORMAT="%-21s%-16s%-61s%3s\n"
  printf $FORMAT dunetpc $NEWVERS ${TARNAME} >>$NEWFILE
  PKGS="dune_pardata lbne_raw_data"
  PKGS="duneutil $PKGS"
  PRODDEPS=$SRCDIR/dunetpc/ups/product_deps
  if [ ! -r $PRODDEPS ]; then
    echo Product deps not found at
    echo "  $PRODDEPS"
    exit 1
  fi
  for PKG in $PKGS; do
    # Get the version number in dot format
    #PKGVERS=`ups depend dunetpc $VERS -q $QUAL | grep "|__$PKG" | sed 's/.*|__//g' | awk '{print $2}'`
    PKGVERS=`grep ^$PKG $PRODDEPS | awk '{print $2}'`
    DOTPKGVERS=`echo $PKGVERS |  sed -e 's/_/./g' | sed -e 's/^v//'`
    # Build the tar file name
    TEMPPKG=larsoft
    if [ $PKG = lbne_raw_data ]; then TEMPPKG=artdaq_core; fi
    if [ $PKG = dune_pardata ]; then TEMPPKG=larbatch; fi
    if [ $PKG = duneutil ]; then TEMPPKG=cppunit; fi
    TEMPLINE=`grep "$TEMPPKG " $LARFILE | grep -v noifdh`
    if [ -z "$TEMPLINE" ]; then
      TEMPLINE=`grep "$TEMPPKG " $LARFILE`
    fi
    if [ -z "$TEMPLINE" ]; then
      echo Unable to find $TEMPPKG in larsoft manifest:
      echo `pwd`/$LARFILE
      exit 3
    fi
    TEMPVERS=`echo $TEMPLINE | awk '{print $2}'`
    DOTTEMPVERS=`echo $TEMPVERS |  sed -e 's/_/./g' | sed -e 's/^v//'`
    TEMPTAR=`echo $TEMPLINE | awk '{print $3}'`
    PKGTAR=`echo $TEMPTAR | sed "s/$TEMPPKG-$DOTTEMPVERS-/$PKG-$DOTPKGVERS-/1"`
    PKGURL=http://scisoft.fnal.gov/scisoft/packages/$PKG/$PKGVERS/$PKGTAR
    if false; then
      echo "----"
      echo $TEMPTAR
      echo $TEMPPKG-$DOTTEMPVERS-
      echo $PKG
      echo $PKGVERS
      echo $PKGTAR
      echo $PKGURL
      echo "----"
    fi
    if [ $PKGTAR = $TEMPTAR ]; then
      echo Unable to convert template tar name for $PKG $PKGVERS
      exit 4
    fi
    if ! curl -Is $PKGURL| head -1 | grep 200 >/dev/null; then
      echo Unable to find tar file for $PKG $PKGVERS at URL
      echo "   $PKGURL"
      exit 5
    fi
    printf $FORMAT $PKG $PKGVERS $PKGTAR >>$NEWFILE
  done
else
  echo Unsupported bundle: $BUNDLE
  exit 3
fi
echo New manifest is: `pwd`/$NEWFILE

if [ -n "$DBG" ]; then echo Done; fi
